/*
@Time       : 2019/12/24 5:20 下午
@Author     : lei
@File       : redisPool
@Software   : GoLand
@Desc       :
*/
package utils

import (
	"gopkg.in/redis.v5"
)



type RedisClient struct {
	addr        string
	password    string
	db          int
	client    *redis.Client
	
}

func NewRedisConn(addr, password string, db int) *RedisClient {
	client, err := redisInit(addr, password, db)
	if err != nil {
		panic(err)
	}
	return &RedisClient{
		addr:        addr,
		password:    password,
		db:          db,
		client: client,
	}
}

func redisInit(addr string, password string, db int) (*redis.Client, error) {
	redisDb := redis.NewClient(&redis.Options{
		Addr:     addr,
		Password: password,
		DB:       db,
		PoolSize: 20,
		//PoolTimeout:        20000,
		//ReadTimeout:        2,
		//WriteTimeout:       2,
		//IdleTimeout:        1,
		
		
	})
	_, err := redisDb.Ping().Result()
	if err != nil {
		return nil, err
	} else {
		return redisDb, nil
	}
}

func (r *RedisClient)HSet(key string, field string, value interface{})(ret bool,err error)  {
	ret,err = r.client.HSet(key,field,value).Result()
	return
}

func (r *RedisClient)SAdd(key string, members ...interface{})(int64, error)  {
	if len(members)==0{
		return 0,nil
	}
	ret,err := r.client.SAdd(key,members...).Result()
	return ret,err
}

func (r *RedisClient)HMSet(key string,values map[string]string)(ret string,err error)  {
	ret,err =r.client.HMSet(key,values).Result()
	return
}

func (r *RedisClient) MSet(pairs ...interface{})(string,error)  {
	keys := make([]interface{},len(pairs)*2)
	/*
	0 1 2 3 4 5 6 7 8 9 10
	0 2 4 6 8 10
	  1   1   1   1   1
	 */
	if len(pairs) == 0{
		return "",nil
	}
	for i:=0;i<len(pairs);i++{
		p := i*2
		keys[p] = pairs[i]
		keys[p+1] = "1"
	}
	return r.client.MSet(keys...).Result()
}
func (r *RedisClient) MGet(pairs ...string)([]interface{},error)  {
	return r.client.MGet(pairs...).Result()
}

func (r *RedisClient) HMGet(key string, fields ...string) (ret []interface{},err error) {
	ret,err = r.client.HMGet(key,fields...).Result()
	return
}
